# Stage 1: Build the frontend application
FROM --platform=linux/amd64 node:20-alpine AS build

# Set working directory
WORKDIR /app

# Install necessary build tools
RUN apk add --no-cache make g++

# Configure npm
RUN npm config set legacy-peer-deps true && \
    npm config set audit false

# Copy package.json and package-lock.json (if exists)
COPY package*.json ./

# Install dependencies with optimized settings
# Using a multi-stage build allows us to keep build dependencies separate
# RUN npm ci --no-fund --prefer-offline --quiet
RUN npm install 

# Copy application source
COPY . .

# Set environment variables for the build
ENV NODE_ENV=production
ENV ROLLUP_SKIP_PLUGINS=true
ENV NODE_OPTIONS="--max-old-space-size=2048"

# Build the application
RUN npm run build

# Stage 2: Serve the application using nginx
FROM --platform=linux/amd64 nginx:alpine

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built assets from build stage
COPY --from=build /app/dist /usr/share/nginx/html

# Make nginx run on the foreground
CMD ["nginx", "-g", "daemon off;"]

# Expose port 80
EXPOSE 80
